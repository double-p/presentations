---
title: "Puffy presents video conferencing / Jitsi on OpenBSD"
author: "Philipp BÃ¼hler, sysfive.com GmbH"
date: 'BSDCan - Ottawa - May, 20th, 2023'
format:
  revealjs:
    theme: [league, style.scss]
    menu: true
    slide-number: true
    preview-links: auto
    show-slide-number: speaker
    slide-tone: false
    transition: fade
    transition-speed: slow
    background-transition: convex
    footer: "BSDCan 2023 - Oddawaah - Jitsi/OpenBSD"
    logo: img/sysfive.jpg
---
## What's ahead

:::: {.columns}
::: {.column width="50%"}

### Riddles Jitsi + OpenBSD
### Components / Terminology
### Install overview
### Configuration OpenBSD / Jitsi
### Watch out / Pitfalls
### Prayers and Demo
### Status + Outlook
:::
::: {.column width="50%"}
`https://is.gd/UWrPxU`
![](img/url.png)

- smtp: pb@sysfive.com
- twitter: pb_double  ; mastodon: double_p
- matrix/irc: double-p
:::
::::

<!-- Page -->
## Riddles: Jitsi (1/2)
- so many components and than some
- even more communication, firewall nightmare?
- help? -> "quick install!", "one-debian VM"
- default all localhost - "discovery magic"?
- java, uuuh, even two versions of 'em!?
- how many entries in DNS again?

<!-- Page -->
## Riddles: Jitsi (2/2)
- `location ~ ^/([^/?&:'"]+)/(.*)$`
- `[JitsiMeetJS.ts] <Object.getGlobalOnErrorHandler>:  UnhandledError: Failed to get a successful response, giving up. Script: null Line: null Column: null StackTrace:  Error: Failed to get a successful response, giving up.`
- who/where/what/wtf - towel launcher / giving up

<!-- Page -->
## Riddles: OpenBSD
- `vm.conf` examples / hoowl-toooo scarce
- need Linux-VMs? no/yes: Alpine/NixOS
- inter VM networking ("the `switch` is dead")
- inside/outside networking (VMM as router)
- scale out (VMM machines, bare-metal, cloud)
- java + `rcctl` (JVM-options)?
- can't we just `pkg_add` and be done?

<!-- Page -->
## SURPRISE LIVEDEMO
### fips.de
[`https://jitsi.fips.de/23`](https://jitsi.fips.de/23)

### PLEASE MUTE audio input
### PLEASE MUTE audio output

- authentication config snippets are in github/.../testing-config/

Infrastructure kindly provided by sysfive.com GmbH
![](img/sysfive.jpg)

<!-- Page -->
## Components: OpenBSD
vmm(4) - virtual machine monitor:
: kernel driver isolating/providing the required resources for the VMs ("hypervisor")

vmd(8):
: userland daemon to interact with `vmm`

vmctl(8) + vm.conf(5)
: tool to create, start/stop, persist VMs and conf.

pkg_add(1):
: install software orderly

rcctl(8) + rc.d(8) + rc.conf(5):
: configure startup and operate software applications

<!-- Page -->
## Components: Jitsi (1/2)
nginx(8): `web`
: serving web assets and reverse proxy BOSH or websockets
 <!-- Bidirectional-streams Over Synchronous HTTP -->

prosody(8): `xmpp`
: conference chat + internal components communication (esp. "PubSub" for health/discovery)

<!-- Page -->
## Components: Jitsi (2/2)
focus: `jicofo` JItsi COnference FOcus
: room+session handling in conferences (who's talking to whom and where)

videobridge: `jvb`
: mediastream (WebRTC) handlings between participants (SFU)

jitsi-srtp: `srtp`
: native library (.so) for faster SRTP crypto 

jibri: JItsi BRoadcasting Infrastructure
: recording + streaming conferences (uncovered)

<!-- Page -->
## Architecture: OpenBSD
![!](img/arch-openbsd.png){.r-stretch}

<!-- Page -->
## Architecture: Jitsi (Net)
![](img/arch-tcp.png){.r-stretch}

<!-- Page -->
## Architecture: Jitsi (logical / ext.)
![](img/arch-pubsub.png){.r-stretch}

<!-- Page -->
## Communications workflow
```{mermaid}
flowchart LR
  F[jicofo] --> D
  A(browser) --> B{webserver}
  B --> C[js/html]
  B --> D[prosody]
  A --> E[videobridge]
  E --> D
```

<!-- Page -->
## Installation: Overview
- create VM images
- /etc/vm.conf
- hosts / DNS
- nginx + jitsi-meet: install, config, certs
- prosody + plugins: install, config, certs, users
- jicofo: install, config
- jvb+srtp: install, config
- DONE

<!-- Page -->
## Installation: vmctl
```{.bash code-line-numbers="5,7-10"}
rcctl enable vmd; rcctl start vmd
mkdir /home/vmm; cd /home/vmm
vmctl create -s 10G web.qcow2
ftp https://cdn.openbsd.org/pub/OpenBSD/7.3/amd64/install73.iso
vmctl start -m 2G -L -i 1 -r install73.iso -d /home/vmm/web.qcow2 web
vmctl console web
## run the (I)nstaller, default options. only one 'a' slice on (w)hole disk
## halt -p (so new sshd_keys per VM)
vmctl stop web
for vm in xmpp jicofo jvb ; do cp web.qcow2 $vm.qcow2; done
echo 'net.inet.ip.forwarding=1' >> /etc/sysctl.conf
```

<!-- Page -->
## Installation: `/etc/vm.conf`
```{.python code-line-numbers="1-6|7-9|10-17"}
vm "web" {
  enable
  memory 2G
  disk "/home/vmm/web.qcow2" format qcow2
  local interface { up }
}
vm "web" instance "xmpp" {
  disk "/home/vmm/xmpp.qcow2" format qcow2
}
vm "web" instance "jicofo" {
  memory 4G
  disk "/home/vmm/jicofo.qcow2" format qcow2
}
vm "web" instance "jvb" {
  memory 4G
  disk "/home/vmm/jvb.qcow2" format qcow2
}
```

<!-- Page -->
## Installation: DNS / `/etc/hosts`
:::{.callout-note}
DNS: ONE A-RR for jitsi.fips.de; but local `hosts` for jicofo (or split DNS)
:::

```{.python code-line-numbers="2"}
100.64.1.3    web
100.64.2.3    xmpp jitsi.fips.de auth.jitsi.fips.de
100.64.3.3    jicofo
100.64.4.3    jvb
```
:::{.callout-note}
adapt `/etc/myname` in each VM accordingly
:::

<!-- Page -->
## `/etc/pf.conf` each VM, VMM

:::{.callout-note}
Not needed for jitsi itself, rather common admin care
:::
```{.python code-line-numbers="|"}
block return log # OUTBOUND IS BAD, TOO, M'KAY?!
pass out quick on egress proto { tcp udp } to any port { 123 53 80 443 }
pass in quick on egress proto tcp from $admin to port 22
```
:::{.callout-note}
block both ways; allow NTP, DNS, HTTP(S), SSH
:::

<!-- Page -->
## `/etc/pf.conf` VMM (as router)  
Assuming all traffic hits the VMM external (public) IP-address  
("on egress")

- jitsi specifics:

```{.python code-line-numbers="1|2|3-4"}
pass in on egress proto tcp to any port { 80 443 } rdr-to web
pass in on egress proto udp to any port { 10000 } rdr-to jvb
pass in proto tcp from { jvb jicofo } to xmpp port 5222 # native
pass in proto tcp from web to xmpp port 5280 # http/BOSH
pass in on egress proto tcp to any port 5280 rdr-to xmpp # debug
```
- DNS
```{.python code-line-numbers="2"}
vms={ web xmpp jicofo jvb }
pass in proto { udp tcp } from $vms to any port domain rdr-to $resolver
```

<!-- Page -->
## `/etc/pf.conf` web / nginx
```{.python code-line-numbers="1|2"}
pass in quick on egress proto tcp to self port { 80 443 }
pass out quick on egress proto tcp to xmpp port 5280
```
:::{.callout-note}
BOSH or XMPP-websocket both run via 5280/tcp
:::

:::{.callout-important}
HTTPS is NOT optional (browser requirement WebRTC); 80/tcp for LE
:::

<!-- Page -->
## `/etc/pf.conf` xmpp / prosody
```{.python code-line-numbers="1|2"}
pass in proto tcp from { jicofo jvb } to self port 5222
pass in proto tcp from web to self port 5280
pass in proto tcp from { $admin } to self port { 5280 5347 } # debug
```
:::{.callout-note}
5347/tcp for explicit authentication if need be (not covered here)
:::

<!-- Page -->
## `/etc/pf.conf` jvb / videobridge
```{.python code-line-numbers="1|2"}
pass out quick on egress proto tcp to xmpp port 5222
pass in quick on egress proto udp to self port 10000 # jvb.conf
pass in quick on egress proto tcp from $monitor to self port 8080

```
:::{.callout-note}
for scale out the 10000/udp can be changed and would make
use of a port range e.g. '10000:10050' vertically or explicit rdr-to
for horizontal scaling (rules in VMM pf.conf, too!). Also useful
for restrictive networks like ....
:::
:::{.callout-note}
jvb has a REST API on 8080/tcp for health/metrics (prometheus)
:::

<!-- Page -->
## `/etc/pf.conf` jicofo / focus server
```{.python code-line-numbers="1"}
pass out quick on egress proto tcp to xmpp port 5222
pass in quick on egress proto tcp from $monitor to self port 8888
```
:::{.callout-note}
jicofo has a REST API on 8888/tcp for metrics - NOT prometheus
:::

<!-- Page -->
## Installation: prosody (xmpp)
Besides the package itself, we need some additional plugins. The
prosody package is a dependency to that.
```{.bash}
pkg_add unzip--
pkg_add jitsi-prosody-plugins # Not worky r/n
```
:::{.callout-note}
The plugins do not need further configuration in prosody.cfg.lua:
client_proxy gets loaded with "Component" configuration (next page).

The roster_command is for CLI only.
:::

<!-- Page -->
## Configuration: prosody (xmpp) (1/2)
- `/etc/prosody/prosody.cfg.lua`: (shortened)
```{.lua code-line-numbers="1,4|2,7|9,10"}
http_interfaces = { "*", "::" }
VirtualHost "jitsi.fips.de"
    authentication = "anonymous";
    modules_enabled = { "bosh"; "pubsub"; }
    c2s_require_encryption = false

VirtualHost "auth.jitsi.fips.de"
    admins = { "focus@auth.jitsi.fips.de", "jvb@auth.jitsi.fips.de" }
    ssl = { key = "/var/prosody/auth.jitsi.fips.de.key";
            certificate = "/var/prosody/auth.jitsi.fips.de.crt"; }
    authentication = "internal_hashed"
```
:::{.callout-note}
`admins` usage details unclear. No DNS for "auth"!
:::

<!-- Page -->
## Configuration: prosody (xmpp) (2/2)
- `/etc/prosody/prosody.cfg.lua`: (shortened)
```{.lua code-line-numbers="1|2,4|5,6|7,8"}
Component "conference.jitsi.fips.de" "muc"
Component "internal.auth.jitsi.fips.de" "muc"
    muc_room_locking = false
    muc_room_default_public_jids = true
Component "jvb.jitsi.fips.de"
    -- component_secret = "CHANGE_jvb" -- 7.2
Component "focus.jitsi.fips.de" "client_proxy"
    target_address = "focus@auth.jitsi.fips.de"
```

:::{.callout-note}
No extra DNS needed! Like "Host:" HTTP-Header.  

`jvb` switching to `focus` authentication now

Full config example in `./testing-config/prosody.cfg.lua`.
:::

<!-- Page -->
## Configuration: prosody users
```{.bash}
rcctl enable prosody ; rcctl start prosody
```

7.2: The connection for `jvb` uses a shared secret as shown on the previous page.

`jicofo` "focus" user:
```{.bash}
prosodyctl install --server=https://modules.prosody.im/rocks/ mod_client_proxy
prosodyctl install --server=https://modules.prosody.im/rocks/ mod_roster_command
prosodyctl register focus auth.jitsi.fips.de CHANGE_FOCUS
prosodyctl register jvb auth.jitsi.fips.de CHANGE_JVB
prosodyctl mod_roster_command subscribe focus.jitsi.fips.de focus@auth.jitsi.fips.de
```

:::{.callout-note}
The FQDN have to match the "Component" in `prosody.cfg.lua`.

No "@" in the `prosodyctl register` arguments.
:::

<!-- Page -->
## Configuration: TLS certificates
```{.bash code-line-numbers="2,4-5"}
# fill in `openssl req` dialog when calling this:
prosodyctl cert generate auth.jitsi.fips.de # result: ./auth.jitsi.fips.de.crt
cd /var/prosody
yes | /usr/local/jdk-11/bin/keytool -import -alias prosody -file \
  auth.jitsi.fips.de.crt -keystore jicofo-key.store -storepass jitsicool
cp jicofo-key.store jvb-key.store # scp to jicofo; same for jvb accordingly
```
:::{.callout-note}
`keytool` comes with JDK, this task can also be done on jicofo or jvb VM - or copy
over the resulting store-files to jicofo/jvb VM respectivly
:::

:::{.callout-important}
Do NOT change JDK's `lib/security/cacerts` - any later JDK upgrade would "forget"
the keystore changes!
:::

<!-- Page -->
## Installation: nginx / web
nginx and the jitsi web elements
```{.bash}
pkg_add nginx
pkg_add jitsi-meet
```
Any TLS setup is mandatory or Chrome/Firefox/.. will refuse to let you
use the camera+microphone.  
Using Let's Encrypt with `acme-client` for the TLS setup is easily possible and included
in `./testing-config/{acme,nginx}.conf`.

:::{.callout-note}
the only needed jitsi-meet configuration is config.js, see below
:::

<!-- Page -->
## Configuration: nginx.conf
`/etc/nginx/nginx.conf`
```{.nginx code-line-numbers="1|2|3-4|5-7|8|9-12|13-14"}
server_name  jitsi.fips.de; # in DNS, public interface
root         /var/www/jitsi-meet; # pkg_add populated
ssi on;
ssi_types application/x-javascript application/javascript;
location ~ ^/(libs|css|static|images|fonts|lang|sounds|connection_optimization)/(.*)$ {
  add_header 'Access-Control-Allow-Origin' '*'; # put paranoia here
  alias /var/www/jitsi-meet/$1/$2; }
location /external_api.js { alias /var/www/jitsi-meet/libs/external_api.min.js; }
location = /http-bind {   # BOSH
  proxy_pass      http://xmpp:5280/http-bind;
  proxy_set_header X-Forwarded-For $remote_addr;
  proxy_set_header Host $http_host; }
location ~ ^/([a-zA-Z0-9=\?]+)$ { # room names trigger no 404
  rewrite ^/(.*)$    /     break; }
```
If using LE, put the `.well-known` location first (above L5)

<!-- Page -->
## Configuration: web+mobile client
- `/var/www/jitsi-meet/config.js`:
```{.javascript code-line-numbers="3-4|6|7|8,10|13"}
var config = {
  hosts: {
    domain: 'jitsi.fips.de', // DNS, public
    // anonymousdomain: 'jitsi.fips.de', // DNS, public
    muc: 'conference.jitsi.fips.de' // no DNS
  },
  bosh: '//jitsi.fips.de/http-bind',
  useTurnUdp: false, enableWelcomePage: true,
  prejoinConfig: {
    enabled: true,
    hideExtraJoinButtons: ['no-audio', 'by-phone'] },
  p2p: {
    stunServers: [
      { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' } ] } }
```
TURN+STUN depends on NAT environment(s) of clients/server.

<!-- Page -->
## Installation / Configuration: jicofo
- `pkg_add jicofo`
- adapt `/etc/jicofo/jicofo.in.sh` if need be
```{.bash code-line-numbers="1-2|3-4|5-7"}
JICOFO_CONF=/etc/jicofo/jicofo.conf # pkg_add
JICOFO_LOG_CONFIG=/usr/local/share/jicofo/lib/logging.properties # pkg_add
JICOFO_TRUSTSTORE=/etc/ssl/jicofo-key.store # yours
JICOFO_TRUSTSTORE_PASSWORD=jitsicool
JICOFO_MAXMEM=3G
JICOFO_DHKEYSIZE=2048
JAVA_SYS_PROPS="-Dwhatever -XX:special"
```

:::{.callout-tip}
jicofo-key.store is generated from prosody certificate, see prosody slide.

you can enable an XMPP-packet-debug-log in logging.properties
:::

<!-- Page -->
## Configuration: jicofo (1/2)
- `/etc/jicofo/jicofo.conf`: (pkg_add, shortened)
```{.javascript code-line-numbers="2|3,6|4|7,8|9-11|15|"}
jicofo { bridge {
  brewery-jid = "JvbBrewery@internal.auth.jitsi.fips.de"
  xmpp-connection-name = Client } // enum
  sctp { enabled = false } // n/a on OpenBSD
  xmpp {
    client {
      hostname = xmpp
      port = 5222
      domain = "auth.jitsi.fips.de"
      username = "focus"
      password = "CHANGE_FOCUS"
      use-tls = true
    }
    // trusted service domains. Logged in -> advance to bridges
    trusted-domains = [ "auth.jitsi.fips.de" ]
  } }
```

<!-- Page -->
## Configuration: jicofo (2/2)
- `/etc/rc.conf.local`:
```{.bash}
rcctl enable jicofo; rcctl set jicofo flags "--host=jitsi.fips.de"
```

:::{.callout-important}
Needs `/etc/hosts` or split-DNS. Used for network connect AND virtualhost
:::

- `/etc/syslog.conf`
```{.text}
!jicofo
*.*     /var/log/jicofo
```
`rcctl restart syslogd; rcctl start jicofo`

<!-- Page -->
## Installation / Configuration: videobridge (1/3)
- `pkg_add jitsi-videobridge`
- `/etc/jvb/jvb.in.sh`:
```{.bash code-line-numbers="1-2|3-4|5-8|9-11"}
JVB_CONF=/etc/jvb/jvb.conf # pkg_add
JVB_LOG_CONFIG=/usr/local/share/jvb/lib/logging.properties # pkg_add
JVB_TRUSTSTORE=/etc/ssl/jvb-key.store # can share with jicofo
JVB_TRUSTSTORE_PASSWORD=jitsicool
JVB_MAXMEM=3G
JVB_DHKEYSIZE=2048
JVB_GC_TYPE=G1GC
JAVA_SYS_PROPS="-Dwhatever -XX:special"
# *sigh*
JVB_SC_HOME_LOCATION='/etc'
JVB_SC_HOME_NAME='jvb'
# result: reads /etc/jvb/sip-communicator.properties
```

<!-- Page -->
## Installation / Configuration: videobridge (2/3)
- `/etc/jvb/jvb.conf`
```{.javascript code-line-numbers="5|6|7,8|9,10|12|13-15|16-17"}
videobridge { apis {
  xmpp-client {
   configs {
    ourprosody {
     hostname = "xmpp" // internal
     domain = "auth.jitsi.fips.de" // 'realm', hosts
     username = "jvb"
     password = "CHANGE_jvb" // Component secret
     muc_jids = "JvbBrewery@internal.auth.jitsi.fips.de"
     muc_nickname = "jvb-bc2023"
     disable_certificate_verification = true } } } }
  sctp { enabled = false } // n/a on OpenBSD
  ice { tcp {
    enabled = false
    port = 443
   } udp {
    port = 10000
   }
  }
}
```

<!-- Page -->
## Installation / Configuration: videobridge (3/3)
`/etc/jvb/sip-communicator.properties`:
```{.java}
org.ice4j.ice.harvest.NAT_HARVESTER_LOCAL_ADDRESS=100.64.4.3
org.ice4j.ice.harvest.NAT_HARVESTER_PUBLIC_ADDRESS=87.253.170.146
org.ice4j.ice.harvest.DISABLE_AWS_HARVESTER=true
```
:::{.callout-note}
ice4j has not been migrated yet, thus not available in "new" JICO config format
:::

`/etc/syslog.conf`
```{.text}
!jvb
*.*     /var/log/jvb
```

`rcctl restart syslogd; rcctl enable jvb ; rcctl start jvb`

<!-- Page -->
## Pitfalls / Hints: OpenBSD
- `rc.conf.local`: jicofo_flags: IP instead DNS/hosts
- startup ordering: 
  - web
  - xmpp 
  - jicofo
  - jvb
  - -> `rcctl order nginx prosody jicofo jvb`
   
 this avoids retries with long wait times (health interval)

<!-- Page -->
## Pitfalls / Hints: Jitsi
- xmpp: host vs. virtualhost vs. domain
- DNS: one and only one (or mess up xmpp fallback)
- not disabling sctp (jvb AND jicofo)
- (hidden) version bumps ("no longer component!")
- jicofo has an XMPP-packetlogger (see `logging.properties`)
- Patience, be really patient (at initial start)
- always check the `,` in config.js (JSON after all..)

<!-- Page -->
## Status (1/2)
:::{.callout-important}
IT WORKS!
:::

Ports / Packages:

- `net/jitsi/videobridge`: 7.2
- `net/jitsi/jicofo`: 7.2
- `net/jitsi/meet`: 7.2
- `net/jitsi/prosody-plugins`: 7.3
- `net/jitsi/srtp`: 7.3

<!-- Page -->
## Status (2/2)
:::{.callout-important}
ALL AT ONCE! - on 7.3
:::
`pkg_add jitsi`

This will install all bits+bytes on ONE machine and has "readme" and
example configuration samples!

<!-- Page -->
## Outlook (1/2)
### Jitsi
- authenticate-a-bit: see testing-config/...auth-first.conf
- fix jitsi-plugins (loading path messes up!)
- `xmpp/jvb`: might move from BOSH to websockets eventually (who takes the perf hit)
- `jibri`: likely linux only (chrome-headless/-driver, x-fb+ffmpeg rip), nixos?; comms like `jvb`
- `jigasi`: feel free / just no POTS/SIP dialin?

<!-- Page -->
## Outlook (2/2)
### scale / Cloudification
- `nginx`: easy scale out; protect nginx->xmpp (new CPU sink with TLS)
- `jvb`: ok; use statistics and one IP only per JVM instance
- `xmpp`: harder; what parameter to split on the frontend/nginx. how to tell jicofo?
- `jicofo`: unsure or not feasible; not the workload horse, also 

### help
- community.jitsi.org: it's a rough place with lots of `quick-install`

<!-- Page -->
## Questions & Cheers
:::: {.columns}
::: {.column width="30%"}
![](img/url.png)
:::
::: {.column width="40%"}
Thanks to:

- OpenBSD / Jitsi
- sysfive.com GmbH
- Aisha Tammy (ports)
:::
::: {.column width="30%"}
Misc:

- QUESTIONS
- Meet: Hallway
:::
::::
:::{.callout-tip}
Created with `Quarto / revealjs`  
[presentation (+testing-config)](https://github.com/double-p/presentations/tree/master/BSDCan/2023/)
`https://is.gd/UWrPxU`
:::

<!-- Page -->
## [(Bonus 1)]{style="color:#cc0000"}
### -current ports
- fetch snapshots ports.tar.gz and unpack in a temporary path
```{.bash}
CVSROOT=anoncvs.XX.openbsd.org:cvs
cd temppath/ports/net ; cvs up -Pd -A
cp -pr jitsi /usr/ports/net
cp ../infrastructure/db/user.list /usr/ports/infrastructure/db/
cd /usr/ports/net/jitsi ; make package # get a coffee/tea/..
scp /usr/ports/packages/amd64/all/jitsi-srtp* jvb:/tmp
scp /usr/ports/packages/amd64/all/jitsi-prosody* xmpp:/tmp
```

<!-- Page -->
## [(Bonus 2)]{style="color:#cc0000"}
on each vm, e.g. install as so  

jvb:
```{.bash}
export TRUSTED_PKG_PATH="/tmp:https://cdn.openbsd.org/pub/OpenBSD/7.2/packages/amd64/"
pkg_add jitsi-srtp
```

<!-- Page -->
## Logs xmpp/jicofo [(Bonus 3)]{style="color:#cc0000"}
```
wrong/missing keystore:
Sep 16 14:35:58 c2s60a86b47480  info    Client connected
Sep 16 14:35:58 c2s60a86b47480  info    Client disconnected: sslv3 alert certificate unknown

wrong password:
Sep 16 14:36:20 c2s60b1aced0c0  info    Stream encrypted (TLSv1.3 with TLS_AES_256_GCM_SHA384)
Sep 16 14:36:21 c2s60b1aced0c0  info    Client disconnected: connection closed

all good:
Sep 16 14:37:00 c2s60a5b549900  info    Stream encrypted (TLSv1.3 with TLS_AES_256_GCM_SHA384)
Sep 16 14:37:01 c2s60a5b549900  info    Authenticated as focus@auth.jitsi.fips.de

jvb/jicofo log; wrong password (rerun prosodyctl register)
org.jivesoftware.smack.sasl.SASLErrorException: SASLError using SCRAM-SHA-1: not-authorized

```
.
```
cant use bridge before (might take; "presence-interval = 120s")
Jicofo 2022-09-16 14:45:24.260 INFO: [35] [type=bridge brewery=jvbbrewery] BaseBrewery.addInstance#341: Added brewery instance: jvbbrewery@internal.auth.jitsi.fips.de/jvb
```
