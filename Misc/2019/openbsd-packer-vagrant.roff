.\"
.\" Copyright (c) 2019 Philipp Buehler <pbuehler@sysfive.com>
.\"
.\" Permission to use, copy, modify, and distribute this presentation for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE PRESENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
.\" WARRANTIES WITH REGARD TO THIS PRESENTATION INCLUDING ALL IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL THE
.\" AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
.\" DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
.\" OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
.\" TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS PRESENTATION.
.\"
.\" --------------------------------------------------------------------
.\" All macro definition taken/inspired from Ingo Schwarze's talk
.\" EuroBSDcon 2015 - "mandoc"
.\" http://www.openbsd.org/papers/eurobsdcon2015-mandoc.roff
.\" --------------------------------------------------------------------
.\"
.\" --- global gpresent configuration settings -------------------------
.DEFCOLOR Navy 0 0 0.5
.DEFCOLOR Navylight 0 0.2 0.8
.TITLECOLOR Navy
.SUBTITLEFORMAT C
.SUBTITLECOLOR Navylight
.FOOTERSIZE 2
.\" We don't want a header line for the title page,
.\" so we have to start it before setting up headers.
.TITLE "OpenBSD: VMM / packer / vagrant"
.\" === gpresent header setup ==========================================
.\" --- define gpresent extension registers ----------------------------
.nr gpe_page_tot 1
.nr gpe_page_sec 0
.af gpe_page_sec I
.nr gpe_time_tsec 18*60+45*60
.nr gpe_time_hour 18
.nr gpe_time_min 45
.af gpe_time_min 45
.nr gpe_time_sec 0
.af gpe_time_sec 02
.
.\" --- macro to start a new section -----------------------------------
.\" use this like: .GPE_SECTION\n.\" - NEXT PAGE\n.SK\n.TITLE
.\" to start a new section upper title, new page with new title prop'y
.de GPE_SECTION
.ds gpe_title_sec \\$1
.nr gpe_page_sec 0
..
.\" --- gpresent page header callback ----------------------------------
.de HEADER
.nr gpe_page_tot +1
.nr gpe_page_sec +1
.sp 0.5v
.ds gpe_middle page \\n[gpe_page_tot]: \\*[gpe_title_sec] \\n[gpe_page_sec]
.tl 'Philipp B\[u0075_0308]hler: OpenBSD VMM packer vagrant'\
\\*[gpe_middle]'\
Warsaw, June 27th, 2019'
.sp -0.5v
.\" horizontal line below the page header
\l'\\n(.lu'\h'-\\n(.lu'
.br
..
.\" --- initialize the first section before completing the title page --
.GPE_SECTION "Opening"
.\" === define some gpresent extension macros ==========================
.\" --- two-column mode (for images) -----------------------------------
.\" 1st arg: width of first column
.\" 2nd arg: move second column up by this amout (default 0.5v)
.\" switch column with normal .MULN, end with normal .MULE
.de GPE_MULB
.nr gpe_colwr \\n(.l-\\$1-1n
.ie \\n[.$]>1 .ds gpe_vsp \\$2
.el .ds gpe_vsp 0.5v
.sp -\\*[gpe_vsp]
.MULB \\$1 1n \\n[gpe_colwr]u
.sp \\*[gpe_vsp]
..
.\" --- emphasis -------------------------------------------------------
.\" arg: text
.de GPE_EM
.COLOR red
\\$1
.COLOR P
..
.\" --- small text -----------------------------------------------------
.\" arg: text
.de GPE_SM
.S -4
.ce
\\$1
.S P
..
.\" --- small text with one emphasised word ----------------------------
.\" 1st arg: text before emphasis
.\" 2nd arg: emphasised text
.\" 3rd arg: text after emphasis
.de GPE_SMEM
.GPE_SM "\\$1 \m[red]\\$2\m[] \\$3"
..
.\"
.\" all macro and title fuzzing done - real work below
.\"
.\" --- title page -----------------------------------------------------
.sp -1v
.SUBTITLE "puffy clouds?"
.SUBTITLE "Philipp B\[u0075_0308]hler <pb@sysfive.com> @pb_double double_p"
.GPE_SM "sysfive.com portfolio"
.MULB 11c 1n 11c
.BL
.LI
Continous system and application operation
.LI
Collaborations with Providers, Developers, Services and QA
.LI
Hybrid cloud provisioning
.LI
cost efficient scaling on commodity HW
.LI
scale out to AWS/GCE/Azure
.LI
Incident, problem, disaster response
.LE
.PSPIC ../../images/sysfive-logo.eps
.MULN
.BL
.LI
Service availability independent of solution scenario
.LI
migrate from or to private/public cloud or own HW
.LI
robust, scalable technology portfolio
.LI
continuous improvements in security and server
architecture
.LI
coherent provisioning across platforms (dev/stage/live)
.LI
vendor/provider independence, OSS focus
.LE
.MULE

.SK
.\" --- macros to start a new page -------------------------------------
.\" arg: time for this page in seconds
.de GPE_TIME
.nr gpe_time_tsec +\\$1
.nr gpe_time_hour \\n[gpe_time_tsec]/3600
.nr gpe_time_min \\n[gpe_time_tsec]%3600/60
.nr gpe_time_sec \\n[gpe_time_tsec]%60
.ds gpe_source BSD-PL 06/2019
..
.\" --- gpresent page footer callback ----------------------------------
.de FOOTER
.ps 18
.vs 20
.sp -2v
\l'\\n(.lu'\h'-\\n(.lu'
.br
.tl '\s-6\\n[gpe_time_hour]:\\n[gpe_time_min]:\s-2\\n[gpe_time_sec]\
 \s+8''sysfive.com @\\m[Navylight]\\*[gpe_source]\ \ \\m[]'
.ps
.vs
..
.GPE_SECTION "Overview"
.\" ---- NEXT PAGE
.SK
.TITLE
.TITLE "Ze problems I tackle with this setup"
.SP 4v
.BL
.LI
Run multiple OpenBSD VMs on OpenBSD - w/o dealing with vm.conf(5)
.LI
create reproducable installs - even "me so unique" ones
.LI
develop and TEST autoinstall at 30,000ft (or -50) "infrastructure to go"
.LI
make inter/intra-networking "just work" - no bridge(8) "hassle"
.LI
and also retrospective (live --> test)
.LI
use the same configuration (Vagrantfile) on OpenBSD/OSX/Linux to get
the same resulting VM package/network/setup
.LE
.GPE_TIME 90
.SK
.TITLE
.TITLE "Solutions / Approaches"
.SP 4v
.BL
.LI
my-imager.sh ; my-deploy.sh
.LI
github | sh
.LI
my-cold-hands ("VM guy is AWOL")
.LI
wrong tool for the job (ansible-install-bsd.rd)
.LI
vagrant / packer (o'rly)
.LE
.GPE_TIME 120
.\" ---- NEXT PAGE
.SK
.TITLE "Puffy boxed on OpenBSD (Dev#1)"
.MULB 12c 1n 8c
.ad l
.PSPIC images/openbsd_host_only.eps
.MULN
.ad l
.BL
.LI
Bootstrap-VM: based on manual install or even better do it in `packer'
.LI
vPuffy1+2: autoinstall from Bootstrap-VM directly
.LI
vPuffy2a: autoinstall via dhcrelay on vPuffy2
.LI
of course those cloud also be tailored images already ("vagrant box")
.LE
.MULE
.GPE_TIME 120
.\" ---- NEXT PAGE
.SK
.TITLE "Puffy boxed on Linux/OSX/.. (Dev#2-n)"
.MULB 12c 1n 8c
.ad l
.PSPIC images/multi-host-os.eps
.MULN
.ad l
Just run the SAME "infrastructure" on
.BL
.LI
OSX (Virtualbox/VMware)
.LI
Linux (Virtualbox/libvirt)
.LI
Cloud (AWS/GCE/..)
.LI
basically everything that Vagrant supports (and that's a lot)
.LE
.MULE
.SP 2v
`Infrastructure' going on a trainride or being airborne -
not only as code (review) - but real testing
.GPE_TIME 60
.\" ---- NEXT PAGE
.SK
.TITLE "Puffy BREAKOUT to physical."
.MULB 12c 1n 8c
.ad l
.PSPIC images/breakout_to_reality.eps
.MULN
.ad l
.BL
.LI
Not impressed so far? Let's go `physical'..
.LI
Run the very SAME "infrastructure" on REAL puffymachines
.LI
Develop + Test virtualized, use results for:
.LI
Confidence in rollouts to baremetal
.LI
debug problems on Laptop, roll-out solution to Realpuffy
.LE
.MULE
.GPE_TIME 120

.GPE_SECTION "Building blocks"
.\" ---- NEXT PAGE
.SK
.TITLE
.TITLE "OpenBSD VMM"
.SP 1v
.BVL 1c
.LI "vmm(4)"
virtual machine monitor (VMM) providing the required resources for the VMs (CPU, Disk, Net)
and handles the necessary memory mapping (isolation).
.LI "vmd(8)"
userland daemon to interact with vmm(4) to create actual VMs and handle their lifecycle through:
.LI "vmctl(8)"
administrative tool to create, start/stop, etc VMs. In this scope also the main 'interface'
for the packer builder plugin.
.LI "vm.conf(5)"
configuration file for vmd(8), persist VM/network configurations.
.LI "doas(1)"
While most tasks the ``builder'' can (and should!) run as unprivileged user, some commands
need to be run as root. The plugin does so automatically.
.GPE_EM "Caveat:"
 needs 'nopass' for now (no tty), 'persist' typically timeouts too early. 
.LE
.GPE_TIME 180
.\" ---- NEXT PAGE
.SK
.TITLE "Vagrant - Architecture"
Vagrant is a collection of ruby-gems wrapped by a go-binary CLI.
Mainly it wraps e.g. VBox or VMWare commands into a abstract
"ascii" configuration file.
Also establishes a communication channel between host and guest
and other networking gems as avaible.
.SP 2v
Naming - what's in the bento?
.SP 1v
.BVL 1c
.LI "Core"
plugin loader "framework" + utils
.LI "Vagrantfile"
A single ruby-DSL configuration file (but there's magic)
.LI "host"
capabilities (Linux, OSX, Free/OpenBSD, ..)
.LI "box"
Disk/BIOS image + metadata packed as tar.gz "under the hood"
.LI "guest"
capabilities (Linux, Free/OpenBSD, ..)
.LI "provider"
capabilities (vbox/VMM/bhyve/...) - where the main show goes
.LI "communicators"
ssh/winssh/winrm to let Vagrant configure the guest
.LI "provisioner"
shell/ansible/Chef/puppet/... run at the first 'up' of the VM
.LE
.GPE_TIME 120
.\" ---- NEXT PAGE
.SK
.TITLE "Vagrant networking capabilities"
.SP 4v
.BL
.LI
port-forward: open arbitrary ports (default 127.0.0.1) on the host and ssh-forward it into the VM
.LI
bridged network: reach out from VM to The Internet (Host might need to NAT)
.LI
"private" network: VM to VM communication on isolated network (bridge(8) rdomain(4)?)
.LE
.GPE_TIME 120

.\" ---- NEXT PAGE
.SK
.TITLE "Vagrant Provisioner - post-postinstall"
.SP 3v
Almost any automation stack can be included into a Vagrant based VM
.BL
.LI
(inline) shell scripts
.LI
ansible
.LI
Chef
.LI
Puppet
.LI
Salt
.LI
you-name-it, likely there's a plugin
.LE
.GPE_TIME 60
.\" ---- NEXT PAGE
.SK
.TITLE "Anatomy of an `vagrant up' session"
.VERBON 0 12
$ uname -a ; bundle exec vagrant status ; bundle exec vagrant up ; \\
 bundle exec vagrant ssh -c "uname -a"
OpenBSD ssfnhv011.ham3.rootnexus.net 6.2 GENERIC.MP#134 amd64
Current machine states:
vagrobsd                  not_created (openbsd)
Bringing machine 'vagrobsd' up with 'openbsd' provider...
==> vagrobsd: Verifying VMM present and CPU capable...
==> vagrobsd: Importing an OpenBSD instance
    vagrobsd: Cloning virtual hard drive...
    vagrobsd: Successfully imported a VM image
    vagrobsd: Creating vmctl configuration
==> vagrobsd: Starting the machine...
==> vagrobsd: Waiting for the machine to report its IP address...
    vagrobsd: IP: 100.64.2.3
==> vagrobsd: Waiting for machine to boot. This may take a few minutes...
    vagrobsd: SSH address: 100.64.2.3:22
    vagrobsd: SSH username: root
    vagrobsd: SSH auth method: password
    vagrobsd: Inserting generated public key within guest...
    vagrobsd: Removing insecure key from the guest if it's present...
    vagrobsd: Key inserted! Disconnecting and reconnecting using new SSH key...
==> vagrobsd: Machine booted and ready!
OpenBSD openbsd62.example.com 6.2 GENERIC#132 amd64
Connection to 100.64.2.3 closed.

$ cat Vagrantfile
Vagrant.configure("2") do |config|
  config.vm.box = "vagrobsd"
  config.ssh.shell = "ksh -l"
  config.ssh.sudo_command = "doas -n %c"
  config.vm.define "vagrobsd" do |v|
    v.vm.hostname = "openbsd-vagrant"
  end
end
.VERBOFF
.GPE_TIME 120
.\" ---- NEXT PAGE
.SK
.TITLE "Drawbacks?"
.BL
.LI
run a full auto-install from a kinda prepared local network
infrastructure or internet every time a VM boots the first time
.LI
new "box" imaging possible - but only on target platform
.LI
multi-disk rather a pain to share (as a box)
.LI
bottom-line: to flexible to be really reproducible and
efficient
.LE
.SP
Now what? packer time!
.\" ---- NEXT PAGE
.SK
.TITLE "What's packer anyway?"
.SP 2v
.VERBON 0 14
Packer is an open source tool for creating *identical* machine images
for multiple platforms from a *single source* configuration.
Packer is lightweight, runs on every major operating system,
and is highly performant, creating machine images for multiple
platforms *in parallel*.

Packer does not replace configuration management like Chef or Puppet.
In fact, when building images, Packer is able to use tools like Chef
or Puppet to install software onto the image.
.VERBOFF
.SP 4v
.BL
.LI
written in golang
.LI
small core providing communications (rpc)
.LI
everything else is a plugin (but linked into one binary)
.LI
configuration in JSON (+ optional variables)
.LE
.GPE_TIME 180
.\" ---- NEXT PAGE
.SK
.TITLE
.TITLE "packer: forms in the sandbox / Terminology"
.SP 2v
.BVL 1c
.LI "Artifacts"
Outcome of a "Build", e.g. AMI, .vmdk, .box
.LI "Builds"
The actual running task producing above artifacts
.LI "Builders"
Code to steer the VM host, handle disk images, etc (see below)
.LI "Provisioners (optional)"
Additional treatment, installation goes here and range from
simple inline shell scripts to full-blown ansible, Chef, ..
.LI "Post-processors"
Treat the Artifacts after creation, e.g. compress, upload AWS, ..
.LI "Templates"
The JSON files defining all of the above (and some) - NOT a VM "template"
.LE
.GPE_TIME 120
.\" ---- NEXT PAGE
.SK
.TITLE
.TITLE Packer: "Builders + Post-Provisioning"
.SP 1v
By default the following ``builder'' engines are supported. Where needed
the accompaning ``post-processor'' is typically available, too (e.g. EC2/AMI upload):
.SP
Alicloud ECS, Amazon EC2, Azure, CloudStack, DigitalOcean, Docker, File, Google Cloud, Hetzner Cloud, HyperOne, Hyper-V, Linode, LXC, LXD, NAVER Cloud, Null, 1&1, OpenStack, Oracle, Parallels, ProfitBricks, QEMU, Scaleway, Tencent Cloud, Triton, Vagrant, VirtualBox, VMware, Yandex.Cloud.
.SP 1v
Further ``builders'' can be found in the wild and are just added as a
single go binary in certain paths (e.g. ~/.packer.d/plugins/)
.SP 2v
By default additional provisioning support for the following tools:
.SP
Ansible, Breakpoint, Chef, Converge, File, InSpec, PowerShell, Puppet, Salt Masterless, Shell.
.GPE_TIME 120

.SK
.TITLE
.TITLE "OpenBSD dependencies / configuration"
.SP 1v
.BL
.LI
/etc/pf.conf:
.SP 0.5v
.VERBON 12 0
# 100.64.0.0/10 default for vmd(8)'s DHCP server
pass in quick proto { udp tcp } from 100.64.0.0/10 to any port domain \\
                 rdr-to $dns_server port domain
pass out quick on $ext_if from 100.64.0.0/10 to any nat-to $ext_if
.VERBOFF
.LI
/etc/sysctl.conf
.SP 0.5v
.VERBON 12 0
net.inet.ip.forwarding=1
.VERBOFF
.LI
vmd(8)
.SP 0.5v
.VERBON 12 0
rcctl enable vmd
rcctl start vmd
.VERBOFF
.LE
.\" ---- NEXT PAGE
.SK
.TITLE "packer *DEMO TIME*"
.SP 2v
.VERBON 12 0
{
  "builders": [
    {
      "type": "openbsd-vmm",
      "name": "packer-obsd64-vmm-amd64",
      "vm_name": "myvm",
      "disk_size": "1500M",
      "disk_format": "raw",
      "output_directory": "images",
      "http_directory": "./docroot",
      "iso_image": "~/Downloads/install65.iso",
      "bios": "/bsd.rd",
      "boot_wait": "5s",
      "boot_command": [
        "A<enter>",
        "http://{{ .HTTPIP }}:{{ .HTTPPort }}/packer-auto_install.conf<enter>"
      ],
      "ssh_username": "root"
    }
  ]
}
.VERBOFF
https://asciinema.org/a/246654
.SP 0.5v
asciinema play ~/devel/presenter/presentations/h4g/2019/tl-demo.cast
.GPE_TIME 360
.GPE_SECTION "Status / Outlook"
.\" ---- NEXT PAGE
.SK
.TITLE "What's already around?"
.SUBTITLE "vagrant"
.BL
.LI
fake netboot (vmctl -B)
.LI
bundle(1) Vagrant 2.1 (but likely works with 1.5+)
.LI
Vagrant provider-plugin: 0.3.0
.BL
.LI
box support for disk install
.LI
host OS detection by vagrant
.LI
VM lifecycle "import/up/halt/destroy"
.LI
Host-to-Guest networking + SSH
.LE
.LE
.SUBTITLE "packer"
.BL
.LI
plugin: all architectural integration (config/builder/driver)
.LI
plugin_steps: create disk/VM/boot/provide auto_install infra
.LE
.\" ---- NEXT PAGE
.SK
.TITLE "What's still to be done?
.SUBTITLE "vagrant"
.BL
.LI
Networking VM-to-VM
.LI
vagrant-binary (Go)
.LI
ports(7)
.LE
.SUBTITLE "packer"
.BL
.LI
GetTapIpAddr
.LI
ports(7)
.LE

.GPE_SECTION "K-THX-BYE"
.\" ---- NEXT PAGE
.SK
.TITLE "Ohai + Links + Thanks"
.BL
.LI
Code/Slides - https://github.com/double-p
.LI
Kickoff - Glarus, Switzerland / https://hack4glarus.ch
.LI
Thanks to Claudio for the idea of vmctl -B
.LI
Thanks to grubernaut for go.mod, review, ISO+QCOW2 support
and other spurious fixes
.LI
Any help/pull request very welcome (e.g. multi-disk)
.LE
.sp 1v
.GPE_EM Questions?
.sp 2v
.PSPIC ../../images/sysfive-logo.eps
.GPE_TIME 60
